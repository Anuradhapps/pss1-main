# Software Requirements Specification (SRS)
# for the
# National Pest Surveillance System (NPSS)

Version 1.0

---

### Table of Contents
1.  Introduction
2.  Overall Description
3.  System Features (Functional Requirements)
4.  External Interface Requirements
5.  Non-Functional Requirements
6.  Appendices

---

## 1. Introduction

### 1.1 Purpose
This document provides a detailed description of the requirements for the National Pest Surveillance System (NPSS). The purpose of the NPSS is to serve as a centralized, web-based platform for the collection, analysis, and reporting of agricultural pest surveillance data, with an initial focus on rice cultivation in Sri Lanka.

### 1.2 Document Conventions
The document uses standard formatting. Key terms are defined in the Glossary in Appendix A. User roles are capitalized (e.g., Administrator, Collector).

### 1.3 Intended Audience
This document is intended for project stakeholders, including developers, project managers, testers, and agricultural department officials. It provides a foundation for system development, testing, and future enhancements.

### 1.4 Project Scope
The scope of the project is the development of a full-stack web application that facilitates:
-   Secure user registration and role-based access.
-   Data entry of pest surveillance information by registered field Collectors.
-   Management of a complex geographical data hierarchy.
-   Automated calculation of pest infestation levels.
-   Data visualization through dynamic charts.
-   Generation of standardized PDF and Excel reports.
-   Administrative oversight of users, data, and system settings.

The system will initially support pest surveillance for the two primary rice seasons in Sri Lanka (Yala and Maha).

### 1.5 References
-   **Project Analysis Report:** `projectreadme.txt` (derived from source code analysis)
-   **Framework Documentation:** Laravel, Livewire, Tailwind CSS

---

## 2. Overall Description

### 2.1 Product Perspective
The NPSS is a self-contained web application built on the Laravel PHP framework. It is designed to replace manual or disparate data collection methods with a unified, digital system. It operates as a server-based application accessed by users through a standard web browser. It provides a dynamic, single-page application experience through the use of the Livewire frontend framework.

### 2.2 Product Features
The major features of the NPSS are:
-   User Authentication and Management (Invitation-based)
-   Role-Based Access Control (RBAC)
-   Collector Data Management
-   Pest Data Collection and Processing
-   Dynamic Data Visualization and Charting
-   PDF and Excel Report Generation
-   System Auditing and Logging
-   Application Settings Management

### 2.3 User Classes and Characteristics

| User Class    | Characteristics                                                                                                |
|---------------|----------------------------------------------------------------------------------------------------------------|
| **Administrator** | Technical user responsible for system oversight. Can manage users, roles, settings, and view all data.         |
| **Collector**     | Field officer responsible for data collection. Can create and manage their own surveillance records and enter pest data. Access is restricted to their own data. |

### 2.4 Operating Environment
-   **Server:** A web server capable of running PHP and the Laravel framework (e.g., Apache, Nginx) with a connected SQL database (e.g., MySQL, PostgreSQL).
-   **Client:** A modern web browser (e.g., Chrome, Firefox, Edge) with JavaScript enabled.

### 2.5 Design and Implementation Constraints
-   **Technology Stack:** The system is constrained to the specified technology stack: Laravel (PHP), Livewire, Tailwind CSS, and a relational SQL database.
-   **Security:** All user access must be authenticated, and data access must be restricted based on user roles.
-   **Data Integrity:** The system must maintain the integrity of the hierarchical geographical data.

### 2.6 Assumptions and Dependencies
-   **Geographic Data:** The system assumes the initial geographic data (Provinces, Districts, etc.) provided in `dbai.csv` is accurate and complete.
-   **Pest List:** The system assumes the initial list of pests is accurate.
-   **Season Definitions:** The system depends on the correct date ranges for the Yala and Maha rice seasons for automated season detection.

---

## 3. System Features (Functional Requirements)

### 3.1 User Authentication
-   **3.1.1 Invitation System:** New users shall not be able to self-register. An Administrator must invite new users by sending an email with a unique, expiring join token.
-   **3.1.2 User Login:** Registered users shall be able to log in using their email and password.
-   **3.1.3 Two-Factor Authentication (2FA):** Users shall have the option to enable 2FA for enhanced security.
-   **3.1.4 Password Reset:** Users shall be able to request a password reset via email.

### 3.2 Role-Based Access Control (RBAC)
-   **3.2.1 Administrator Role:** Users with the 'admin' role shall have full access to all system features, including user management, role/permission editing, and viewing all collector data.
-   **3.2.2 Collector Role:** Users with the 'collector' role shall only be able to create, view, and edit their own data collection records.
-   **3.2.3 Permission System:** The system shall have a granular permissions table to define specific actions (e.g., `view_users`, `edit_pests`) that can be assigned to roles.

### 3.3 Data Collection
-   **3.3.1 Collector Record Creation:** A Collector shall be able to create a new surveillance record for a specific rice season and geographic location.
-   **3.3.2 Dynamic Location Selection:** The system shall provide a series of dependent dropdown menus for selecting location: Province -> District -> ASC -> AI Range. Each dropdown shall be populated based on the selection of the parent dropdown.
-   **3.3.3 Automated Season Detection:** The system shall automatically determine and suggest the current rice season (Yala/Maha) based on the current system date.
-   **3.3.4 Pest Data Entry:** For each collection event, a Collector shall be able to enter the number of pests found in 10 distinct sample locations (tillers).

### 3.4 Pest Data Processing
-   **3.4.1 Mean Calculation:** Upon submission of pest data, the system shall automatically calculate the mean number of pests per tiller (`mean = total_pests / 10`).
-   **3.4.2 Infestation Coding:** The system shall automatically assign a pest `code` (an integer from 0-4) based on the calculated mean, representing the level of infestation.

### 3.5 Data Visualization
-   **3.5.1 Chart Generation:** The system shall generate various bar charts to visualize aggregated pest data.
-   **3.5.2 Filtering:** Administrators shall be able to filter chart data by Province, District, ASC, AI Range, and Rice Season.
-   **3.5.3 Chart Types:** The system shall provide charts to show:
    -   Pest levels for a single location over time.
    -   Average pest levels for an entire region (e.g., Province, District).
    -   Comparison of pest levels for a single location across multiple seasons.

### 3.6 Reporting
-   **3.6.1 PDF/Excel Export:** The system shall be able to export data in both PDF and Excel formats.
-   **3.6.2 Bi-Weekly Pest Memo:** The system shall generate a PDF report summarizing pest data from the last two weeks.
-   **3.6.3 User/Collector Lists:** The system shall generate reports listing all users or all registered collectors.

### 3.7 System Administration
-   **3.7.1 User Management:** An Administrator shall be able to create (via invitation), view, edit, and delete users.
-   **3.7.2 Audit Trail:** The system shall log all significant user actions (e.g., user login, data creation/update/deletion) in an `audit_trails` table.
-   **3.7.3 System Settings:** An Administrator shall be able to manage application-wide settings, such as the site name and logos, through a key-value settings table.

---

## 4. External Interface Requirements

### 4.1 User Interfaces
-   The application shall provide a web-based graphical user interface (GUI) that is responsive and accessible on modern web browsers.
-   The UI shall be built using Livewire and Tailwind CSS to provide a dynamic and intuitive user experience.
-   The interface will feature dynamic forms with dependent dropdowns for efficient data entry.

### 4.2 Hardware Interfaces
-   No special hardware interfaces are required.

### 4.3 Software Interfaces
-   **Database:** The system shall interface with a relational SQL database (e.g., MySQL, PostgreSQL) via the Laravel framework.
-   **API:** The system provides RESTful API endpoints for user registration, login, and data submission. These are secured using Laravel Sanctum and are available for future integration with other clients (e.g., a mobile app).

### 4.4 Communications Interfaces
-   The system shall communicate with users via the HTTP/S protocol.
-   The system shall be capable of sending emails for user invitations and password resets.

---

## 5. Non-Functional Requirements

### 5.1 Performance Requirements
-   The system's UI shall be responsive, with page loads and dynamic component updates completing within a reasonable time frame (typically under 3 seconds).
-   Database queries, especially for chart and report generation, shall be optimized to handle a large volume of data.

### 5.2 Security Requirements
-   All user passwords must be securely hashed before being stored in the database.
-   The system must be protected against common web vulnerabilities, including Cross-Site Scripting (XSS) and SQL Injection, by leveraging the security features of the Laravel framework.
-   Access to all pages (except for login, register, etc.) shall require authentication.
-   Data access must be strictly enforced by the RBAC system.

### 5.3 Software Quality Attributes
-   **Maintainability:** The code shall be well-structured and follow Laravel conventions to be easily maintainable and extensible.
-   **Reliability:** The system should be reliable and available during operational hours. Data backups should be performed regularly.
-   **Usability:** The user interface should be intuitive and easy to use for non-technical users (Collectors) with minimal training.

---

## 6. Appendices

### Appendix A: Glossary
-   **AI Range:** Agricultural Instructor Range. A specific geographic area.
-   **ASC:** Agrarian Service Center. A larger geographical area containing multiple AI Ranges.
-   **Collector:** A user role for a field officer who collects and enters pest data.
-   **Infestation Code:** A 0-4 scale representing the severity of a pest infestation.
-   **Livewire:** A full-stack framework for Laravel that allows building dynamic interfaces.
-   **Maha Season:** One of the two primary rice cultivation seasons in Sri Lanka.
-   **RBAC:** Role-Based Access Control.
-   **Yala Season:** One of the two primary rice cultivation seasons in Sri Lanka.

### Appendix B: Database Schema Overview
(A summary of the schema described in `projectreadme.txt`)

-   **`users`**: Stores user account information, including credentials, roles, and invite tokens.
-   **`roles`, `permissions`**: Manages the RBAC system.
-   **Geographic Tables (`provinces`, `districts`, `as_centers`, `ai_ranges`)**: Stores the hierarchical location data.
-   **`rice_seasons`**: Defines the start and end dates for cultivation seasons.
-   **`collectors`**: The central table linking a User to a location for a specific season.
-   **`common_data_collects`**: Represents a single data collection visit/event.
-   **`pest_data_collects`**: Stores the raw pest counts for a collection event, along with the calculated `mean` and `code`.
-   **`audit_trails`**: Logs all significant user actions.
-   **`settings`**: Key-value store for application settings.
